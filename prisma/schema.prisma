generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model adhesions {
  id         Int      @id @default(autoincrement())
  droit      Int
  annee      Int
  lecteur_id Int
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  lecteurs   lecteurs @relation(fields: [lecteur_id], references: [id], onDelete: Cascade, map: "fk1_LECTEUR")

  @@index([lecteur_id], map: "lecteur_id")
}

model consultations {
  id          Int       @id @default(autoincrement())
  livre_id    Int
  date_cons   DateTime  @db.Date
  heure_debut DateTime  @db.Time(0)
  heur_fin    DateTime? @db.Time(0)
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  livres      livres    @relation(fields: [livre_id], references: [id], onDelete: Cascade, map: "fk1_LIVRE")

  @@index([livre_id], map: "livre_id")
}

model lecteurs {
  id              Int         @id @default(autoincrement())
  num_lecteur     String      @db.VarChar(25)
  nom_lecteur     String      @db.VarChar(40)
  prenom_lecteur  String?     @db.VarChar(40)
  adresse_lecteur String      @db.VarChar(40)
  telephone       String?     @db.VarChar(40)
  created_at      DateTime    @default(now()) @db.Timestamp(0)
  updated_at      DateTime    @default(now()) @db.Timestamp(0)
  adhesions       adhesions[]
  prets           prets[]
}

model livres {
  id            Int             @id @default(autoincrement())
  num_livre     String          @db.VarChar(25)
  disponible    Boolean         @default(true)
  nb_pret       Int             @default(0)
  ouvrage_id    Int
  created_at    DateTime        @default(now()) @db.Timestamp(0)
  updated_at    DateTime        @default(now()) @db.Timestamp(0)
  ouvrages      ouvrages        @relation(fields: [ouvrage_id], references: [id], onDelete: Cascade, map: "fk1_OUVRAGE")
  consultations consultations[]
  prets         prets[]

  @@index([ouvrage_id], map: "fk1_OUVRAGE")
}

model ouvrages {
  id           Int       @id @default(autoincrement())
  titre        String    @db.VarChar(40)
  auteur       String    @db.VarChar(40)
  date_edition DateTime? @db.Date
  created_at   DateTime  @default(now()) @db.Timestamp(0)
  updated_at   DateTime  @default(now()) @db.Timestamp(0)
  livres       livres[]
}

model prets {
  id          Int       @id @default(autoincrement())
  num_pret    String    @db.VarChar(25)
  date_pret   DateTime  @db.Date
  date_retour DateTime? @db.Date
  lecteur_id  Int
  livre_id    Int
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  updated_at  DateTime  @default(now()) @db.Timestamp(0)
  lecteurs    lecteurs  @relation(fields: [lecteur_id], references: [id], onDelete: Cascade, map: "fk2_LECTEUR")
  livres      livres    @relation(fields: [livre_id], references: [id], onDelete: Cascade, map: "fk2_LIVRE")

  @@index([lecteur_id], map: "lecteur_id")
  @@index([livre_id], map: "livre_id")
}

model users {
  id         Int      @id @default(autoincrement())
  fullname   String   @db.VarChar(50)
  pseudo     String?  @db.VarChar(50)
  password   String   @db.VarChar(50)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
}
